plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
	id "com.github.johnrengelman.shadow" version "7.1.0"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		url "${project.projectDir}/../maven"
	}
	maven {
		name = "CurseMaven"
		url = "https://www.cursemaven.com"
	}
//	maven { url "https://maven.shedaniel.me/" }
}
dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// use implementation to include libarary when testing ie runClient
	implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-toml:2.14.2"
	// must shadow the dependency to include it in the final jar.
	// NOTE this seems opposite of the documentation
	// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
	shadow "com.fasterxml.jackson.core:jackson-annotations:2.14.2"
	shadow "com.fasterxml.jackson.core:jackson-core:2.14.2"
	shadow "com.fasterxml.jackson.core:jackson-databind:2.14.2"
	shadow "com.fasterxml.jackson.dataformat:jackson-dataformat-toml:2.14.2"

	modImplementation "gottsch:fabric-GottschCore-1.18.2:v2.1.0"
	modImplementation ("curse.maven:jade-324717:4160646")

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	//withSourcesJar()
}

jar {
		from("LICENSE") {
			rename { "${it}_${project.archivesBaseName}"}
		}
}

shadowJar {
	classifier 'shadow-dev'
	configurations = [project.configurations.shadow]
	// must specify which dependencies to include in the jar
	dependencies {
		include(dependency("com.fasterxml.jackson.core:jackson-annotations:2.14.2"))
		include(dependency("com.fasterxml.jackson.core:jackson-core:2.14.2"))
		include(dependency("com.fasterxml.jackson.core:jackson-databind:2.14.2"))
		include(dependency("com.fasterxml.jackson.dataformat:jackson-dataformat-toml:2.14.2"))
	}
	relocate 'com.fasterxml.jackson.annotation', 'mod.gottsch.fabric.eechelons.core.shadow.annotation'
	relocate 'com.fasterxml.jackson.core', 'mod.gottsch.fabric.eechelons.core.shadow.core'
	relocate 'com.fasterxml.jackson.databind', 'mod.gottsch.fabric.eechelons.core.shadow.databind'
	relocate 'com.fasterxml.jackson.dataformat', 'mod.gottsch.fabric.eechelons.core.shadow.dataformat'
}

prepareRemapJar {
	dependsOn shadowJar
}

remapJar {
	inputFile = shadowJar.archiveFile.get()
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
